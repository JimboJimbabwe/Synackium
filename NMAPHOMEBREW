{
  "ServiceProbes": [
    {
      "Service": "HTTP (Generic)",
      "DefaultPort": 80,
      "Probes": [
        {
          "Description": "Basic HTTP GET",
          "Send": "GET / HTTP/1.0\r\n\r\n",
          "ExpectedResponses": [
            {
              "Pattern": "^HTTP/[0-9]\\.[0-9] [0-9]{3}",
              "Indicates": "HTTP server"
            },
            {
              "Pattern": "Server: Apache",
              "Indicates": "Apache"
            },
            {
              "Pattern": "Server: nginx",
              "Indicates": "Nginx"
            }
          ]
        },
        {
          "Description": "Malformed HTTP Request",
          "Send": "INVALID / HTTP/1.0\r\n\r\n",
          "ExpectedResponses": [
            {
              "Pattern": "^HTTP/[0-9]\\.[0-9] 400",
              "Indicates": "HTTP server with standard error handling"
            },
            {
              "Pattern": "<title>400 Bad Request</title>",
              "Indicates": "Nginx style error page"
            }
          ]
        }
      ]
    },
    {
      "Service": "Redis",
      "DefaultPort": 6379,
      "Probes": [
        {
          "Description": "Redis INFO Command",
          "Send": "*1\r\n$4\r\nINFO\r\n",
          "ExpectedResponses": [
            {
              "Pattern": "redis_version:",
              "Indicates": "Redis server"
            }
          ]
        },
        {
          "Description": "Redis PING",
          "Send": "*1\r\n$4\r\nPING\r\n",
          "ExpectedResponses": [
            {
              "Pattern": "+PONG",
              "Indicates": "Redis server responding"
            }
          ]
        }
      ]
    },
    {
      "Service": "MongoDB",
      "DefaultPort": 27017,
      "Probes": [
        {
          "Description": "MongoDB isMaster",
          "Send": {
            "HexString": "3900000000000000000000000000FFFFFFFF430000000000000000000100000000000000696E7465726E616C2E69734D6173746572000000000000F03F00",
            "Explanation": "Binary message requesting isMaster status"
          },
          "ExpectedResponses": [
            {
              "Pattern": "\"ismaster\" : true",
              "Indicates": "MongoDB primary"
            },
            {
              "Pattern": "\"ismaster\" : false",
              "Indicates": "MongoDB secondary"
            }
          ]
        }
      ]
    },
    {
      "Service": "MySQL",
      "DefaultPort": 3306,
      "Probes": [
        {
          "Description": "MySQL Handshake",
          "Send": {
            "HexString": "200000018521000000000000000000000000000000000000000000000000000000000000000000000000",
            "Explanation": "Client handshake initialization packet"
          },
          "ExpectedResponses": [
            {
              "Pattern": "^.\\x00\\x00\\x00\\x0a(5\\.|8\\.)",
              "Indicates": "MySQL server version"
            }
          ]
        }
      ]
    },
    {
      "Service": "Elasticsearch",
      "DefaultPort": 9200,
      "Probes": [
        {
          "Description": "Elasticsearch Info",
          "Send": "GET / HTTP/1.0\r\n\r\n",
          "ExpectedResponses": [
            {
              "Pattern": "\"cluster_name\"\\s*:",
              "Indicates": "Elasticsearch node"
            },
            {
              "Pattern": "\"version\"\\s*:\\s*{\\s*\"number\"\\s*:",
              "Indicates": "Elasticsearch with version info"
            }
          ]
        }
      ]
    },
    {
      "Service": "PostgreSQL",
      "DefaultPort": 5432,
      "Probes": [
        {
          "Description": "PostgreSQL Startup",
          "Send": {
            "HexString": "000000080000000400000000",
            "Explanation": "SSL request packet"
          },
          "ExpectedResponses": [
            {
              "Pattern": "^S",
              "Indicates": "PostgreSQL with SSL"
            },
            {
              "Pattern": "^N",
              "Indicates": "PostgreSQL without SSL"
            }
          ]
        }
      ]
    },
    {
      "Service": "SSH",
      "DefaultPort": 22,
      "Probes": [
        {
          "Description": "SSH Version",
          "Send": "SSH-2.0-OpenSSH_8.1\r\n",
          "ExpectedResponses": [
            {
              "Pattern": "^SSH-2\\.0-OpenSSH_",
              "Indicates": "OpenSSH server"
            },
            {
              "Pattern": "^SSH-2\\.0-Dropbear",
              "Indicates": "Dropbear SSH server"
            }
          ]
        }
      ]
    },
    {
      "Service": "Memcached",
      "DefaultPort": 11211,
      "Probes": [
        {
          "Description": "Memcached Version",
          "Send": "version\r\n",
          "ExpectedResponses": [
            {
              "Pattern": "^VERSION ",
              "Indicates": "Memcached server"
            }
          ]
        },
        {
          "Description": "Memcached Stats",
          "Send": "stats\r\n",
          "ExpectedResponses": [
            {
              "Pattern": "^STAT pid",
              "Indicates": "Memcached server stats"
            }
          ]
        }
      ]
    },
    {
      "Service": "RabbitMQ",
      "DefaultPort": 5672,
      "Probes": [
        {
          "Description": "AMQP Protocol Header",
          "Send": {
            "HexString": "414D515001000000",
            "Explanation": "AMQP protocol header"
          },
          "ExpectedResponses": [
            {
              "Pattern": "^AMQP\\x00\\x00\\x09\\x01",
              "Indicates": "RabbitMQ AMQP 0-9-1"
            }
          ]
        }
      ]
    },
    {
      "Service": "Kafka",
      "DefaultPort": 9092,
      "Probes": [
        {
          "Description": "Kafka API Version Request",
          "Send": {
            "HexString": "0000002100000000000000000018000000000000096B61666B612D726571000000000000",
            "Explanation": "ApiVersions request"
          },
          "ExpectedResponses": [
            {
              "Pattern": "\\x00\\x00\\x00.*\\x00\\x00\\x00\\x00",
              "Indicates": "Kafka broker response"
            }
          ]
        }
      ]
    }
  ]
}
