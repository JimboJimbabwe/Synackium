#!/usr/bin/env python3
import json
import glob
from pathlib import Path
from typing import Dict, List, Optional

class IPBankEntry:
    def __init__(self, ip: str, resolved: bool, domain: Optional[str] = None):
        self.data = {
            "Value": ip,
            "ResolvedBoolean": resolved,
            "ResolvedDomain": domain,
            "Ports": [],
            "Service": [],
            "Endpoints": [],
            "PotentialPorts": []
        }

class IPBank:
    def __init__(self, filepath: Path):
        self.filepath = filepath
        self.data: Dict[str, Dict] = {}
        self.load()

    def load(self):
        """Load existing IPBank.json if it exists, otherwise create empty database."""
        if self.filepath.exists():
            try:
                with open(self.filepath, 'r') as f:
                    self.data = json.load(f)
                print(f"Loaded existing database with {len(self.data)} entries")
            except json.JSONDecodeError:
                print("Error reading existing database, creating new one")
                self.data = {}
        else:
            print("No existing database found, creating new one")
            self.data = {}

    def save(self):
        """Save the current state of the database to file."""
        with open(self.filepath, 'w') as f:
            json.dump(self.data, f, indent=2)
        print(f"Saved database with {len(self.data)} entries")

    def add_entry(self, ip: str, resolved: bool, domain: Optional[str] = None):
        """Add or update an entry in the database."""
        if ip not in self.data:
            entry = IPBankEntry(ip, resolved, domain)
            self.data[ip] = entry.data
        else:
            # Update existing entry with new resolution information
            self.data[ip]["ResolvedBoolean"] = resolved
            self.data[ip]["ResolvedDomain"] = domain

def process_resolution_file(filepath: Path, ipbank: IPBank):
    """Process a single resolution JSON file and update the IPBank."""
    try:
        with open(filepath, 'r') as f:
            entries = json.load(f)
        
        # Determine if this is a resolved or unresolved file
        is_resolved = "Resolved.json" in filepath.name
        
        for entry in entries:
            ip = entry["IP"]
            domain = entry.get("ResolvedDomain")
            ipbank.add_entry(ip, is_resolved, domain)
            
        print(f"Processed {len(entries)} entries from {filepath.name}")
    except json.JSONDecodeError:
        print(f"Error reading {filepath.name}: Invalid JSON format")
    except KeyError as e:
        print(f"Error processing {filepath.name}: Missing required field {e}")

def main():
    # Initialize IPBank
    ipbank = IPBank(Path("IPBank.json"))
    
    # Find all resolution files
    resolved_files = glob.glob("*Resolved.json")
    unresolved_files = glob.glob("*Unresolved.json")
    
    # Process all resolution files
    for filepath in resolved_files + unresolved_files:
        if filepath == "IPBank.json":  # Skip our own database file
            continue
        print(f"\nProcessing {filepath}...")
        process_resolution_file(Path(filepath), ipbank)
    
    # Save the final database
    ipbank.save()
    
    # Print summary
    total_entries = len(ipbank.data)
    resolved_entries = sum(1 for entry in ipbank.data.values() if entry["ResolvedBoolean"])
    print(f"\nFinal Summary:")
    print(f"Total IPs in database: {total_entries}")
    print(f"Resolved IPs: {resolved_entries}")
    print(f"Unresolved IPs: {total_entries - resolved_entries}")

if __name__ == "__main__":
    main()
